class ExploitsController < UiController
  before_action :set_exploit, only: [:show, :edit, :update, :destroy]

  # GET /exploits
  # GET /exploits.json
  def index
    respond_to do |format|
      format.html
      format.json { render json: ExploitDatatable.new(params) }
    end
  end

  # GET /exploits/1
  # GET /exploits/1.json
  def show
  end

  # GET /exploits/new
  def new
    @exploit = Exploit.new
  end

  # GET /exploits/1/edit
  def edit
  end

  # POST /exploits
  # POST /exploits.json
  def create
    @exploit = Exploit.new(exploit_params)

    respond_to do |format|
      if @exploit.save
        format.html { redirect_to @exploit, notice: 'Exploit was successfully created.' }
        format.json { render :index, status: :created }
      else
        format.html { render :index }
        format.json { render json: @exploit.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /exploits/1
  # PATCH/PUT /exploits/1.json
  def update
    respond_to do |format|
      if @exploit.update(exploit_params)
        format.html { redirect_to @exploit, notice: 'Exploit was successfully updated.' }
        format.json { render :index, status: :ok }
      else
        format.html { render :index }
        format.json { render json: @exploit.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /exploits/1
  # DELETE /exploits/1.json
  def destroy
    @exploit.destroy
    respond_to do |format|
      format.html { redirect_to exploits_url, notice: 'Exploit was successfully destroyed.' }
      format.json { head :no_content }
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_exploit
      @exploit = Exploit.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def exploit_params
      params.fetch(:flag, {}).permit(:content)
    end
end

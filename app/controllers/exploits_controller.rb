# frozen_string_literal: true

class ExploitsController < UiController
  before_action :set_exploit, only: [:show, :edit, :update, :destroy]

  def index
    respond_to do |format|
      format.html
      format.json { render json: ExploitDatatable.new(params) }
    end
  end

  def show; end

  def new
    respond_to do |format|
      format.html
      format.js
    end
  end

  def edit
    respond_to do |format|
      format.html
      format.js
    end
  end

  def create
    @exploit = Exploit.new(permitted_params)

    if @exploit.save
      include_for_all_teams if included?
      respond_to do |format|
        format.html { redirect_to exploits_path }
      end
    else
      head :unprocessable_entity
    end
  end

  def update
    if @exploit.update(permitted_params)
      include_for_all_teams if included?

      respond_to do |format|
        format.html { redirect_to exploits_path }
      end
    else
      head :unprocessable_entity
    end
  end

  def destroy
    @exploit.destroy!
    head :no_content
  end

  private

  def set_exploit
    @exploit = Exploit.find(params[:id])
  end

  def permitted_params
    params
      .fetch(:exploit, {})
      .permit(:title, :source, :status, :period, :timeout, :included)
      .yield_self { |params| Utils.with_numeric_status(params) }
  end

  def included?
    params.key?(:included)
  end

  def include_for_all_teams
    Team.all.each do |team|
      @exploit.teams << team unless @exploit.teams.include?(team)
    end
  end
end

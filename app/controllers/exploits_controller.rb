class ExploitsController < UiController
  before_action :set_exploit, only: [:show, :edit, :update, :destroy]

  # GET /exploits
  # GET /exploits.json
  def index
    respond_to do |format|
      format.html
      format.json { render json: ExploitDatatable.new(params) }
    end
  end

  # GET /exploits/1
  # GET /exploits/1.json
  def show
  end

  # GET /exploits/new
  def new
    respond_to do |format|
      format.html
      format.js
    end
  end

  # GET /exploits/1/edit
  def edit
    respond_to do |format|
      format.html
      format.js
    end
  end

  # POST /exploits
  # POST /exploits.json
  def create
    @exploit = Exploit.new(exploit_params)

    if @exploit.save
      respond_to do |format|
        format.html { redirect_to exploits_path }
      end
    else
      head :unprocessable_entity
    end
  end

  # PATCH/PUT /exploits/1
  # PATCH/PUT /exploits/1.json
  def update
    if @exploit.update(exploit_params)
      respond_to do |format|
        format.html { redirect_to exploits_path }
      end
    else
      head :unprocessable_entity
    end
  end

  # DELETE /exploits/1
  # DELETE /exploits/1.json
  def destroy
    @exploit.destroy
    head :no_content
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_exploit
      @exploit = Exploit.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def exploit_params
      _exploit_params = params.fetch(:exploit, {}).permit(:title, :source, :status, :period, :timeout)
      _exploit_params[:status] = _exploit_params[:status] == 'up' ? 1 : 0
      _exploit_params
    end
end
